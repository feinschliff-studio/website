{"version":3,"mappings":";;;;;;ijDAEO,SAASA,GAAc,CACpB,MAAAC,EAAU,qCAAAC,EAAA,oQAAAA,EAAA,oFAAAA,EAAA,qFAAAA,EAAA,4FAAAA,EAAA,sEAMhB,UAAWC,KAAQF,EACfA,EAAQE,CAAI,IAAI,KAAMC,GAAgC,CAGlD,MAAMC,EAAY,OAAO,OAAOD,CAAM,EAAE,CAAC,GAAK,KAE1C,CAACC,GAAa,CAACA,EAAU,UAI7BA,EAAU,SAAS,cAAc,EACpC,CAET,CAoBO,SAASC,EACZC,EACAC,EAA4B,GAC5BC,EAAqC,GACb,CAClB,MAAAC,EAAU,SAAS,cAAcH,CAAI,EAE3C,UAAWI,KAASF,EAAU,CACtB,UAAOE,GAAU,SAAU,CACnBD,EAAA,mBAAmB,YAAaC,CAAK,EAE7C,QACJ,CAEAD,EAAQ,YAAYC,CAAK,CAC7B,CAEO,cAAO,QAAQH,CAAU,EAAE,OAAO,CAACE,EAAS,CAACE,EAAWC,CAAK,IAAM,CACtE,OAAQD,EAAW,CACf,IAAK,QACD,MAAME,EAAoB,MAAM,QAAQD,CAAK,EACvCA,EACA,CAACA,CAAe,EACtBH,EAAQ,UAAU,IAAI,GAAGI,CAAO,EAChC,MAEJ,IAAK,QACD,OAAS,CAACC,EAAUC,CAAU,IAAK,OAAO,QAAQH,CAAK,EACnDH,EAAQ,MAAM,YAAYK,EAAUC,CAAU,EAElD,MAEJ,IAAK,OACD,OAAS,CAACD,EAAUE,CAAS,IAAK,OAAO,QAAQJ,CAAK,EAClDH,EAAQ,QAAQK,CAAQ,EAAIE,EAGpC,QACIP,EAAQE,CAAS,EAAIC,CAC7B,CAEOH,UACRA,CAAO,CACd,CCrFO,SAASV,GAAc,CACpB,WAAK,SAAS,qBAAqB,UAAU,CAAC,EAAE,QAASU,GAAY,CACvEA,EAAQ,MAAM,OAAS,GAAGA,EAAQ,YAAY,KAC9CA,EAAQ,MAAM,UAAY,SAClBA,EAAA,iBACJ,QACA,IAAK,CACDA,EAAQ,MAAM,OAAS,EACvBA,EAAQ,MAAM,OAAS,GAAGA,EAAQ,YAAY,IAClD,EACA,GACJ,CACH,CACL,CCTA,SAAS,iBAAiB,mBAAoB,IAAM,CACxBQ,IACEC,GAC9B,CAAC","names":["setup","modules","__vitePreload","path","module","component","createElement","type","attributes","children","element","child","attribute","value","classes","property","styleValue","dataValue","configureCustomElements","configureTextAreaElements"],"ignoreList":[],"sources":["../../src/components/index.ts","../../src/modules/text-area.ts","../../src/main.ts"],"sourcesContent":["import { CustomElementInterface } from './CustomElement';\n\nexport function setup(): void {\n    const modules = import.meta.glob<CustomElementModule>([\n        './*.ts',\n        '!./index.ts',\n        '!./CustomElement.ts',\n    ]);\n\n    for (const path in modules) {\n        modules[path]().then((module: CustomElementModule) => {\n            // Take the first exported symbol, as we know it must be a component\n            // instance exposing a register method\n            const component = Object.values(module)[0] || null;\n\n            if (!component || !component.register) {\n                return;\n            }\n\n            component.register(customElements);\n        });\n    }\n}\n\ninterface CustomElementModule {\n    [key: string]: CustomElementInterface;\n}\n\ntype Attributes<K extends keyof HTMLElementTagNameMap> = Partial<\n    Record<\n        keyof HTMLElementTagNameMap[K],\n        HTMLElementTagNameMap[K][Extract<\n            keyof HTMLElementTagNameMap[K],\n            string\n        >]\n    >\n> &\n    Partial<{\n        class: string | string[];\n        data: Record<string, string>;\n    }>;\n\nexport function createElement<K extends keyof HTMLElementTagNameMap>(\n    type: K,\n    attributes: Attributes<K> = {} as Attributes<K>,\n    children: (HTMLElement | string)[] = [],\n): HTMLElementTagNameMap[K] {\n    const element = document.createElement(type);\n\n    for (const child of children) {\n        if (typeof child === 'string') {\n            element.insertAdjacentText('beforeend', child);\n\n            continue;\n        }\n\n        element.appendChild(child);\n    }\n\n    return Object.entries(attributes).reduce((element, [attribute, value]) => {\n        switch (attribute) {\n            case 'class':\n                const classes: string[] = Array.isArray(value)\n                    ? value\n                    : [value as string];\n                element.classList.add(...classes);\n                break;\n\n            case 'style':\n                for (let [property, styleValue] of Object.entries(value)) {\n                    element.style.setProperty(property, styleValue);\n                }\n                break;\n\n            case 'data':\n                for (let [property, dataValue] of Object.entries(value)) {\n                    element.dataset[property] = dataValue;\n                }\n\n            default:\n                element[attribute] = value;\n        }\n\n        return element;\n    }, element);\n}\n","export function setup(): void {\n    Array.from(document.getElementsByTagName('textarea')).forEach((element) => {\n        element.style.height = `${element.scrollHeight}px`;\n        element.style.overflowY = 'hidden';\n        element.addEventListener(\n            'input',\n            () =>{\n                element.style.height = 0;\n                element.style.height = `${element.scrollHeight}px`;\n            },\n            false,\n        );\n    });\n}\n","import './style.pcss';\nimport { setup as configureCustomElements } from './components';\nimport { setup as configureTextAreaElements } from './modules/text-area';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    configureCustomElements();\n    configureTextAreaElements();\n});\n"],"file":"assets/main-BBHruhVx.js"}