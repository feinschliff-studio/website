{"version":3,"mappings":"CAAqB,UAAoB,CACrC,MAAMA,EAAU,SAAS,cAAc,MAAM,EAAE,QAC/C,GAAIA,GAAWA,EAAQ,UAAYA,EAAQ,SAAS,eAAe,EAC/D,OAEJ,UAAWC,KAAQ,SAAS,iBAAiB,2BAA2B,EACpEC,EAAeD,CAAI,EAEvB,IAAI,iBAAkBE,GAAc,CAChC,UAAWC,KAAYD,EACnB,GAAIC,EAAS,OAAS,YAGtB,UAAWC,KAAQD,EAAS,WACpBC,EAAK,UAAY,QAAUA,EAAK,MAAQ,iBACxCH,EAAeG,CAAI,CAGvC,CAAK,EAAE,QAAQ,SAAU,CAAE,UAAW,GAAM,QAAS,EAAI,CAAE,EACvD,SAASC,EAAaC,EAAQ,CAC1B,MAAMC,EAAY,GAClB,OAAID,EAAO,YACPC,EAAU,UAAYD,EAAO,WAC7BA,EAAO,iBACPC,EAAU,eAAiBD,EAAO,gBAClCA,EAAO,cAAgB,kBACvBC,EAAU,YAAc,UACnBD,EAAO,cAAgB,YAC5BC,EAAU,YAAc,OAExBA,EAAU,YAAc,cACrBA,CACV,CACD,SAASN,EAAeD,EAAM,CAC1B,GAAIA,EAAK,GAEL,OACJA,EAAK,GAAK,GAEV,MAAMO,EAAYF,EAAaL,CAAI,EACnC,MAAMA,EAAK,KAAMO,CAAS,CAC7B,CACL,2tBCxCO,SAASC,GAAc,CACpB,kxBAMN,UAAWC,KAAQC,EACfA,EAAQD,GAAM,EAAE,KAAME,GAAgC,CAGlD,MAAMC,EAAY,OAAO,OAAOD,CAAM,EAAE,IAAM,KAE1C,CAACC,GAAa,CAACA,EAAU,UAI7BA,EAAU,SAAS,cAAc,EACpC,CAET,CAmBO,SAASC,EACZC,EACAC,EAA4B,GAC5BC,EAAqC,GACb,CAClB,QAAU,SAAS,cAAcF,CAAI,EAE3C,UAAWG,KAASD,EAAU,CACtB,UAAOC,GAAU,SAAU,CACnBC,qBAAmB,YAAaD,CAAK,EAE7C,QACJ,CAEAC,EAAQ,YAAYD,CAAK,CAC7B,CAEO,cAAO,QAAQF,CAAU,EAAE,OAAO,CAACG,EAAS,CAACC,EAAWC,CAAK,IAAM,CACtE,OAAQD,EAAW,CACf,IAAK,QACD,MAAME,EAAoB,MAAM,QAAQD,CAAK,EACvCA,EACA,CAACA,CAAe,EACtBF,EAAQ,UAAU,IAAI,GAAGG,CAAO,EAChC,MAEJ,IAAK,QACD,OAAS,CAACC,EAAUC,CAAU,IAAK,OAAO,QAAQH,CAAK,EACnDF,EAAQ,MAAM,YAAYI,EAAUC,CAAU,EAElD,MAEJ,QACIL,EAAQC,GAAaC,CAC7B,CAEOF,UACRA,CAAO,CACd,CC/EO,SAASV,GAAc,CACpB,WAAK,SAAS,qBAAqB,UAAU,CAAC,EAAE,QAASU,GAAY,CAC/DA,QAAM,OAAS,GAAGA,EAAQ,iBAClCA,EAAQ,MAAM,UAAY,SAClBA,mBACJ,QACA,IAAK,CACDA,EAAQ,MAAM,OAAS,EACfA,QAAM,OAAS,GAAGA,EAAQ,gBACtC,EACA,GACJ,CACH,CACL,CCTA,SAAS,iBAAiB,mBAAoB,IAAM,CACxBM,IACEC,GAC9B,CAAC","names":["relList","link","processPreload","mutations","mutation","node","getFetchOpts","script","fetchOpts","setup","path","modules","module","component","createElement","type","attributes","children","child","element","attribute","value","classes","property","styleValue","configureCustomElements","configureTextAreaElements"],"sources":["../../vite/modulepreload-polyfill","../../src/components/index.ts","../../src/modules/text-area.ts","../../src/main.ts"],"sourcesContent":["__VITE_IS_MODERN__&&(function polyfill() {\n    const relList = document.createElement('link').relList;\n    if (relList && relList.supports && relList.supports('modulepreload')) {\n        return;\n    }\n    for (const link of document.querySelectorAll('link[rel=\"modulepreload\"]')) {\n        processPreload(link);\n    }\n    new MutationObserver((mutations) => {\n        for (const mutation of mutations) {\n            if (mutation.type !== 'childList') {\n                continue;\n            }\n            for (const node of mutation.addedNodes) {\n                if (node.tagName === 'LINK' && node.rel === 'modulepreload')\n                    processPreload(node);\n            }\n        }\n    }).observe(document, { childList: true, subtree: true });\n    function getFetchOpts(script) {\n        const fetchOpts = {};\n        if (script.integrity)\n            fetchOpts.integrity = script.integrity;\n        if (script.referrerpolicy)\n            fetchOpts.referrerPolicy = script.referrerpolicy;\n        if (script.crossorigin === 'use-credentials')\n            fetchOpts.credentials = 'include';\n        else if (script.crossorigin === 'anonymous')\n            fetchOpts.credentials = 'omit';\n        else\n            fetchOpts.credentials = 'same-origin';\n        return fetchOpts;\n    }\n    function processPreload(link) {\n        if (link.ep)\n            // ep marker = processed\n            return;\n        link.ep = true;\n        // prepopulate the load record\n        const fetchOpts = getFetchOpts(link);\n        fetch(link.href, fetchOpts);\n    }\n}());","import { CustomElementInterface } from './CustomElement';\n\nexport function setup(): void {\n    const modules = import.meta.glob<CustomElementModule>([\n        './*.ts',\n        '!./index.ts',\n        '!./CustomElement.ts',\n    ]);\n\n    for (const path in modules) {\n        modules[path]().then((module: CustomElementModule) => {\n            // Take the first exported symbol, as we know it must be a component\n            // instance exposing a register method\n            const component = Object.values(module)[0] || null;\n\n            if (!component || !component.register) {\n                return;\n            }\n\n            component.register(customElements);\n        });\n    }\n}\n\ninterface CustomElementModule {\n    [key: string]: CustomElementInterface;\n}\n\ntype Attributes<K extends keyof HTMLElementTagNameMap> = Partial<\n    Record<\n        keyof HTMLElementTagNameMap[K],\n        HTMLElementTagNameMap[K][Extract<\n            keyof HTMLElementTagNameMap[K],\n            string\n        >]\n    >\n> &\n    Partial<{\n        class: string | string[];\n    }>;\n\nexport function createElement<K extends keyof HTMLElementTagNameMap>(\n    type: K,\n    attributes: Attributes<K> = {} as Attributes<K>,\n    children: (HTMLElement | string)[] = [],\n): HTMLElementTagNameMap[K] {\n    const element = document.createElement(type);\n\n    for (const child of children) {\n        if (typeof child === 'string') {\n            element.insertAdjacentText('beforeend', child);\n\n            continue;\n        }\n\n        element.appendChild(child);\n    }\n\n    return Object.entries(attributes).reduce((element, [attribute, value]) => {\n        switch (attribute) {\n            case 'class':\n                const classes: string[] = Array.isArray(value)\n                    ? value\n                    : [value as string];\n                element.classList.add(...classes);\n                break;\n\n            case 'style':\n                for (let [property, styleValue] of Object.entries(value)) {\n                    element.style.setProperty(property, styleValue);\n                }\n                break;\n\n            default:\n                element[attribute] = value;\n        }\n\n        return element;\n    }, element);\n}\n","export function setup(): void {\n    Array.from(document.getElementsByTagName('textarea')).forEach((element) => {\n        element.style.height = `${element.scrollHeight}px`;\n        element.style.overflowY = 'hidden';\n        element.addEventListener(\n            'input',\n            () =>{\n                element.style.height = 0;\n                element.style.height = `${element.scrollHeight}px`;\n            },\n            false,\n        );\n    });\n}\n","import './style.pcss';\nimport { setup as configureCustomElements } from './components';\nimport { setup as configureTextAreaElements } from './modules/text-area';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    configureCustomElements();\n    configureTextAreaElements();\n});\n"],"file":"assets/main.7f9c864d.js"}